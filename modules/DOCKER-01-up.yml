title: Docker-Compose Up
pre-requisites: 
learning-objective: docker-compose up
screens:
  - lab:
      title: How to Use Docker
      id: docker-up-text
      presenter-script: 
      introduction: |
        Docker is a tool that lets you easily run code on any machine you'd like. While building and running a new in-development program often takes a large amount of set-up and managing dependencies, Docker makes this process relatively trivial once an app has been set up to work with Docker, or "dockerized".

        In this course, we'll teach you how to set up and use Docker to speed up the most common developer workflow.


        ## What is Docker?

        Docker is a suite of products that all focus on running applications on any server or computer architecture. This means that once you get your application running using Docker, you can port it to any other computer with Docker installed by simply running a few commands.

        Docker Engine is the product that most people refer to when they discuss "docker". Engine is the underlying technology behind all Docker products which builds images and runs them in containers. However, Engine on its own doesn't get you much.

        When Engine is combined with other Docker tools such as Compose and Swarm, it can help you solve more common software development problems. Docker for Mac and Windows bundles Engine with these and other tools in an easy to install package.

        In addition to local tools, Docker also has public and private cloud products which make managing images and deploying to production easy.


        ## Why Docker?

        There are several common problems that Docker solves. The first and most common is normalizing development environments so that code that works on one machine works on all of them. This is the first forray into Docker for most firms and individuals. Each developer has Docker on their computer, and every time they push code to GitHub (or the version control solution of their choice), a new image is created that anyone can test and change. This also makes it very easy to get new developers onboarded: all they have to do is run a single docker command, and the code is guaranteed to be running on their machine. This is the usecase we'll be teaching you in this course. You can see how the Oxford University Press does this in the video below.

        <div class='container' data-video-url='https://youtu.be/tGhMPrjgLdE'></div>

        A variant on this workflow is used at **Keybase**. Keybase is cryptography software that requires a lot of low-level code to be written. Compiling and building this code requires a number of specific Linux dependencies. Rather than have every developer manage these dependencies, there is a "build image". When testing new code, the developers build the project in that image, and then save it to their local machine. They can then run the application locally, or release it to the public. 

        Docker can also speed up your production process. Watch the video below to see how YELP uses Docker in production.

        <div class='container' data-video-url='https://youtu.be/V00VzuQ9Aqg'></div>



        These and many more workflows are made possible by using Docker. In this course, we'll be focusing on the first one: how to use Docker Engine and Docker Compose to standardize your dev environment and get it up and running on any machine in just a few minutes. On the next page, we'll walk you through getting a pre-built dev environment running on your computer, then in the next few lessons we'll teach you how to "dockerize" your own projects.
  - lab:
      title: Playing with the container.
      id: docker-up
      presenter-script:
      introduction: |
        Let's look at how you might use Docker to speed up your developer workflow. We've set up a project so that you can see how easy Docker makes set-up for someone new to your code base, which we'll use in the tutorial below.

        Pretend its your first day on a new job, and your boss wants you to write and test some new code. Without Docker, you'd have to get an environment up and running that runs your code, often following a long set of instructions on downloading the right linux distro and adding the right versions of the right packages to it.

        With Docker, you can do all of this on your local machine by running a single command, `docker-compose up -d`. When run in the directory that your code lives in, it will run the docker image associated with that code, and any others that are needed to get it up and running. 

        The first time you do this, downloading the images might take a few minutes, but after that you can have your code up and running in seconds. 

        One of the nice things about this workflow is that your code can still live on your local machine, even while it's run in the docker container. That way, you can edit the code locally using whatever set-up you like the most (this course was written in Sublime Text 3, for instance), and it will auto-update in the container when you save it.

        Run through the steps below **in the learning container** you set up earlier to see how this works in action.
      steps:
        - description: |
            Run `docker ps` to see what is running. The only running container should be the learning container you're working in.
          id: docker-up-ps
          verifications:
            - verification-type: cli-ps
              id: docker-demo-ps-verification
              success-message: "You ran `ps` correctly. Let's run some containers to make it less empty."
              failure-message: "It looks like you haven't run the command yet. Make sure you're doing it in the learning container!"
        - description: |
            First, download your new code. Type `git clone https://github.com/wheelhouseio/FoodTrucks.git`, and once that's finished `cd` into the `/FoodTrucks` directory.
          id: docker-up-cd
        - description: |
            Go ahead and take a peak at the code: you can see it's written in several languages and frameworksâ€”none of which are installed on the learning container.

            Now we run it anyway! To run the code in a docker container, type `docker-compose up -d` in the code's top-level directory. 

            You'll want to make sure to include the `-d` or you won't be able to use your command line while the containers are running!
          id: docker-up-compose-up
          verifications:
            - verification-type: compose-up
              id: docker-up-compose-up-verification
              success-message: "Good work, it looks like the code is now running on your computer in a container!"
              failure-message: "It looks like you haven't run `docker-compose up -d` yet."
        - description: |
            Run `docker ps` again to see the new containers that are now running.
          id: docker-up-ps-2
        - description: |
            Go to `docker.local:5000` in your browser to see the application running. 
          id: docker-up-browser
        - description: |
            You can free up resources on your machine by spinning down the images used to run the code. Run `docker-compose down` to spin them down gracefully.
          id: docker-up-compose-down
          verifications:
            - verification-type: compose-down
              id: docker-up-compose-down-verification
              success-message: "Great, all the images have spun down. Run a `docker ps` to check it out yourself. Click 'next' to move on."
              failure-message: "It looks like the project is still running."
additional-labs:
additional-questions:
resources:
